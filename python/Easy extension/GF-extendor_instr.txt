GF_extendor will automatically add to both DCECExt.gf and EngExt.gf
As of now, GF_exendor only supports adding one type of words at a time (do not try to do say both agents.txt and binary ActionTypes in the same go).
To use GF_extendor, add words to input.txt with fomat word1,word2,word3,... (do not forget final comma after last word) 
	i.e. (to add agents) copy agents.txt to in.txt, then run GF_exendor.py with stdin 1 



This rest of this is a guide for adding by hand for when I inevitably break things.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
ADDING NEW AGENTS
 

1. Open DCECExt.gf
2. Append name of agent (denoted x for example) to jack, cogito, ... , robot_s : Agent ;
	i.e. jack, cogito, ... , robot_n, x : Agent ;
3. Save DCECExt.gf
4. Open EngExt.gf
5. Anywhere inside linearlization (after lin but before oper), add the following line (preferably near other agents for readability)
        
	x  = {descr = (mkNP (mkN human (mkN "named X"))); name = (mkNP (mkPN "X")) ; gender= y} ;
	   
	where y = "masculine" | "feminine"
-------------------------------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------------------------------------
ADDING NEW UNARY ACTIONTYPES (verbs applied to only one Agent e.g. "I 'grow' " and "I 'sleep' "  )

1. Open DCECExt.gf
2. Append new verb (we'll use 'grow' in this example) to unary ActionType line ( laugh, sleep,..., die : ActionType ;)
	i.e. laugh, sleep,..., die, grow : ActionType ;
3. Append new verb (we'll use 'grow' in this example) to unary Agent->Fluent line ( laugh_f, sleep_f,..., die_f : Agent -> Fluent ;)
	i.e. laugh_f, sleep_f,..., die_f, grow_f : Agent->Fluent ;
4. Save DCECExt.gf
5. Open EngExt.gf
6. Anywhere in linearization (preferably with other unary actiontypes), add the following line
	grow = (unaryAction (mkV "grow" "grew" "grown"));



	where the 3 forms of grow following mkV are: basic form, past simple, and past participle

7. Anywhere in linearization (preferably under refrain3), add the following line
	 grow_f agent= (activityFluent agent (mkV "grow" "grew" "grown"));

	where the 3 forms of grow following mkV are: basic form, past simple, and past participle
8. Save EngExt.gf
-------------------------------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------------------------------------
ADDING NEW BINARY ACTIONTYPES (verbs applied to two agents e.g. "I 'hurt' Cogito" and "I 'destroy'ed it"
1. Open DCECExt.gf
2. Append new verb (mislead in this example) to binaryAction line (hurt, guard,..., injure : Agent-> ActionType;) 
	i.e. hurt, guard, ..., injure, mislead : Agent-> ActionType;
3. Save DCECExt.gf
4. Open EngExt.gf
5. Anywhere in linearization (preferably with other binary actiontypes), add the following line
	mislead a= (binaryAction (mkV "mislead" "misled" "misled") a);

	where the 3 forms of mislead following mkV are: basic form, past simple, and past participle
6. Save EngExt.gf
-------------------------------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------------------------------------
ADDING NEW NULLARY FLUENTS 
1. Open DCECExt.gf
2. Append new nullary fluent (hailing in this example) to Fluent line (raining, snowing : Fluent;
)
	i.e. raining, snowing, hailing : Fluent;
3. Save DCECExt.gf
4. Open EngExt.gf
5. Anywhere in linearization (preferably with other Nullary Fluents), add the following line
	hailing = (nullaryFluent (mkV "hail"));

6. Save EngExt.gf
-------------------------------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------------------------------------
ADDING NEW UNARY FLUENTS (e.g. "I am 'happy' ", Cogito was 'sad' ")
1. Open DCECExt.gf
2. Append new unary fluent (jacked in this example) to Agent->Fluent line (hungry,tired, sick,sad,happy,angry: Agent->Fluent;)
	i.e. hungry,tired, sick,sad,happy,angry,jacked: Agent->Fluent;
3. Save DCECExt.gf
4. Open EngExt.gf
5. Anywhere in linearization (preferably with other Unary Fluents), add the following line
	jacked agent = (unaryFluent agent  (mkAP (mkA "jacked"))) ;

6. Save EngExt.gf
-------------------------------------------------------------------------------------------------------------------------------------------------------------